name: Linux-Debian
on: 
  # push代码时触发workflow
  push:
    paths:
      - 'CMakeLists.txt'
      - '**'
      - '.github/workflows/windows.yml'
  pull_request:
    paths:
      - 'CMakeLists.txt'
      - 'src/**'
      - '.github/workflows/windows.yml' 
jobs:
  build:
    name: Build
    # 运行平台
    runs-on:  ${{ matrix.os }}
    strategy:
      matrix: # 矩阵配置
        qt_ver: [5.12.11]    # 参考: https://mirrors.cloud.tencent.com/qt/online/qtsdkrepository/linux_x64/desktop/qt5_51211
        qt_target: [desktop]
        qt_arch: [gcc_64]
        os: [ubuntu-20.04]  # ubuntu-18.04
    env:
      targetName: GitHubAction
      targetOS: linux
      # ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      
    steps:
      # - name: Cache Qt  # 使用缓存安装Qt模块
        # id: cache-qt
        # uses: actions/cache@v1  # not v2! 参见 https://github.com/jurplel/install-qt-action
        # with:
          # path: ../Qt
          # key: ${{ runner.os }}-QtCache
      
      - name: Install Qt
        if: steps.WindowsCacheQt.outputs.cache-hit != 'true'
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          # cached: ${{ steps.cache-qt.outputs.cache-hit }}
          set-env: true
      
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          
      # - name: pull 3rdparty code
        # run: |
          # cd ${{github.workspace}}
          # git submodule init
          # git submodule update
          
      # - name: cache-msvc-build
        # id: cache-msvc-build
        # uses: actions/cache@v1
        # with:
            # path: msvc-build-install
            # key: msvc-build-windows-install

      - name: gcc-build
        id: gcc-build
        shell: bash
        run: |
          mkdir build
          cd build
          cmake ../src
          make -j8
     
      - name: NameVersion
        id: NameVersion
        shell: pwsh
        run: |
          $productVersion="${{ github.ref }}".substring("refs/tags/".length)
          echo "productVersion=$productVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $productName="${{ env.targetName }}-${{ env.targetOS }}-${{ matrix.msvc_arch }}"
          echo "productName=$productName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          echo "productNameVersion=$productName-$productVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      tag打为.zip包 
      - name: Package
        id: Package      
        if: startsWith(github.event.ref, 'refs/tags/')
        shell: bash
        run: |
          mkdir bin
          cp build/${{ env.targetName }} bin
          cp build/debian/* bin
          
          cd bin
          sudo chmod 777 bin/ldd.sh
          sudo chmod 777 GitHubAction.sh
          ./ldd.sh GitHubAction
          ls
          
          cd ..
          zip -q -r ${{ env.productNameVersion }}.zip bin/*
          
          ls
        
      # tag上传Release
      # tag上传Release
      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.upload_release }}
        with:
          draft: false
          prerelease: false
          files: |
            ${{ env.productNameVersion }}.zip
            ${{ github.workspace }}/LICENSE
          tag: ${{ github.ref }}
          overwrite: true 