name: Windows
on: 
  # push代码时触发workflow
  push:
    paths:
      # - 'CMakeLists.txt'
      # - '**'
      - '.github/workflows/windows.yml'
  pull_request:
    paths:
      # - 'CMakeLists.txt'
      # - 'src/**'
      - '.github/workflows/windows.yml' 
jobs:
  build:
    name: Build
    # 运行平台，windows-latest目前是windows server 2022，考虑稳定暂用 2019，
    # 参考文档 https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: windows-2019  
    strategy:
      matrix: # 矩阵配置
        qt_ver: [5.12.11]     # Qt 5.12.11 参考 https://mirrors.cloud.tencent.com/qt/online/qtsdkrepository/windows_x86/desktop/qt5_51211
        qt_target: [desktop]
        qt_arch: [win32_msvc2017, win64_msvc2017_64]
        include:
          - qt_arch: win32_msvc2017
            msvc_arch: x86
            qt_arch_install: msvc2017
          - qt_arch: win64_msvc2017_64
            msvc_arch: x64
            qt_arch_install: msvc2017_64
    env:
      targetName: GitHubAction
      targetOS: windows
      # ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      
    steps:
      # - name: Cache Qt  # 使用缓存安装Qt模块
        # id: cache-qt
        # uses: actions/cache@v1  # not v2! 参见 https://github.com/jurplel/install-qt-action
        # with:
          # path: ../Qt
          # key: ${{ runner.os }}-QtCache
      
      - name: Install Qt
        if: steps.WindowsCacheQt.outputs.cache-hit != 'true'
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          # cached: ${{ steps.cache-qt.outputs.cache-hit }}
          set-env: true
      
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          
      # - name: pull 3rdparty code
        # run: |
          # cd ${{github.workspace}}
          # git submodule init
          # git submodule update
          
      # - name: cache-msvc-build
        # id: cache-msvc-build
        # uses: actions/cache@v1
        # with:
            # path: msvc-build-install
            # key: msvc-build-windows-install

      - name: msvc-build
        id: msvc-build
        shell: cmd
        run: |
          cd ${{ github.workspace }}
          mkdir bin
          mkdir build

          cd build
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}

          if "${{ matrix.msvc_arch }}" == "x86" (
            echo "1111111111------------"
            cmake -G "Visual Studio 16 2019" -A Win32 ../src
            devenv "${{ env.targetName }}.sln" /Build "Release|Win32"
          ) else (
            echo "2222222222------------"
            cmake -G "Visual Studio 16 2019" -A x64 ../src
            devenv "${{ env.targetName }}.sln" /Build "Release|x64"
          )
          

          cd ${{ github.workspace }}/build/Release
          echo "333333333333333------------------a3"
          chdir
          dir
     
      - name: NameVersion
        id: NameVersion
        shell: pwsh
        run: |
          $productVersion="${{ github.ref }}".substring("refs/tags/".length)
          echo "productVersion=$productVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          $productName="${{ env.targetName }}-${{ env.targetOS }}-${{ matrix.msvc_arch }}"
          echo "productName=$productName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          echo "productNameVersion=$productName-$productVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # tag打为.zip包 
      - name: Package
        id: Package      
        if: startsWith(github.event.ref, 'refs/tags/')
        shell: pwsh
        run: |
          Copy-Item -Path build/Release/* -Destination bin/
          dir bin
          echo "--------------------------1"
          windeployqt bin/${{ env.targetName }}.exe
          
          dir bin
          echo "--------------------------2"

          Compress-Archive -Path ${{ github.workspace }}/bin/* -Destination ${{ env.productNameVersion }}.zip
          
          dir
        
      # tag上传Release
      # tag上传Release
      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.upload_release }}
        with:
          draft: false
          prerelease: false
          files: |
            ${{ env.productNameVersion }}.zip
            ${{ github.workspace }}/LICENSE
          tag: ${{ github.ref }}
          overwrite: true 